---
title: "How to plot in R"
author: "Li Zhiwei"
format: 
  revealjs:
    theme: [default, theme/custom.scss, theme/q-theme.scss]
    slide-number: c/t
    logo: "images/logo_ccmu.png"
    footer: "[https://jthomasmock.github.io/arrow-dplyr](https://jthomasmock.github.io/arrow-dplyr)"
    incremental: true
    highlight-style: a11y
    width: 1920
    height: 1080
    chalkboard: true
editor: visual
execute: 
  echo: true
---
## Content

<br> <br>

-   Table 1 <br> <br>
-   Forestplot <br> <br>
-   A combined plot

# Table 1

## What is `Table-1`?

::: columns
::: {.column width="35%"}
It is standard practice in epidemiology and related fields that the first table of any journal article, referred to as "Table 1", is a table that presents descriptive statistics of **baseline characteristics** of the study population **stratified by exposure**.
:::

::: {.column width="31%"}
![](images/paper_table1.png)
:::

::: {.column width="31%"}
![](images/paper_table2.png)
:::
:::

## Creat table 1 using `tableone` package

```{r}
#| warning: false
#| message: false
#| code-line-numbers: "1|2"
library(tableone) # main package
dat = read.csv('examples/data/table1_data.csv')
```

. . .

![](images/data_tableone.png)

## Creat table 1 using `tableone` package

```{r}
#| code-line-numbers: "|1-2|3|4-7|8-9|10"
#| eval: false
listVars <- c("Age", "Gender", "Cholesterol", "SystolicBP", 
              "BMI", "Smoking", "Education")
catVars <- c("Smoking","Education")
table1 <- CreateTableOne(vars = listVars, 
                         data = dat, 
                         factorVars = catVars, 
                         strata = c("Gender"))
a <- print(table1, quote = TRUE, noSpaces = TRUE)
a <- as.data.frame(a)
write.csv(a, 'result_tableone.csv')
```

. . .

![](images/result_tableone.png)

## Creat table 1 using `arsenal` package

```{r}
#| code-overflow: wrap
#| output-location: fragment
#| code-line-numbers: "1|2-3|4-5"
library(arsenal)
tab1 <- tableby(Gender ~ Age + Cholesterol + SystolicBP + 
                  BMI + Smoking+ Education, data = dat)
sum_tab1 <- summary(tab1, text=TRUE)
sum_tab1
```

## Creat table 1 using `arsenal` package

``` r
sum_tab1_out <- summary(tab1, text=NULL) %>% as.data.frame()
write.csv(sum_tab1_out, 'code/table1/result_arsenal_table1.csv', row.names = F)
```

![](images/result_tableby.png)

## Creat table 1 using `arsenal` package

#### tableby.control() function

Control test and summary settings for the *tableby()* function.

``` r
tableby.control(
  test = TRUE,
  total = TRUE,
  total.pos = c("after", "before"),
  test.pname = NULL,
  numeric.simplify = FALSE,
  cat.simplify = FALSE,
  cat.droplevels = FALSE,
  ordered.simplify = FALSE,
  date.simplify = FALSE,
  numeric.test = "anova",
  cat.test = "chisq",
  ordered.test = "trend",
  surv.test = "logrank",
  date.test = "kwt",
  selectall.test = "notest",
  test.always = FALSE,
  numeric.stats = c("Nmiss", "meansd", "range"),
  cat.stats = c("Nmiss", "countpct"),
  ordered.stats = c("Nmiss", "countpct"),
  surv.stats = c("Nmiss", "Nevents", "medSurv"),
  date.stats = c("Nmiss", "median", "range"),
  selectall.stats = c("Nmiss", "countpct"),
  stats.labels = list(),
  digits = 3L,
  digits.count = 0L,
  digits.pct = 1L,
  digits.p = 3L,
  format.p = TRUE,
  digits.n = 0L,
  conf.level = 0.95,
  wilcox.correct = FALSE,
  wilcox.exact = NULL,
  chisq.correct = FALSE,
  simulate.p.value = FALSE,
  B = 2000,
  times = 1:5,
  ...
)
```

## Creat table 1 using `arsenal` package

```{r}
#| code-line-numbers: "|1|4"
#| eval: false
mycontrols  <- tableby.control(numeric.stats = c("meansd"))
tab1 <- tableby(Gender ~ Age + Cholesterol + SystolicBP + 
                  BMI + Smoking+ Education, data = dat,
                  control = mycontrols)
```

. . .

![](images/result_tableby_control.png){width="60%"}

## Application `tableby()` in our paper

``` r
tab1 <- tableby(disease_type_en~sex+age_group2+continent+defi_year,data=data2)
sum_tab1_out <- summary(tab1, text=NULL) %>% as.data.frame()
writexl::write_xlsx(sum_tab1_out, 'table_1.new.xlsx')
```

![](images/application_table1.png){width="1400" height="800"}

## Application `tableby()` in our paper

![](images/application_table1-2.png)

## Resources

<br> <br> 1. [Using the table1 Package to Create HTML Tables of Descriptive Statistics](https://cran.r-project.org/web/packages/table1/vignettes/table1-examples.html) <br> <br> <br> 2. [Introduction to tableone](https://cran.r-project.org/web/packages/tableone/vignettes/introduction.html) <br> <br> <br> 3. [The tableby function](https://cran.r-project.org/web/packages/arsenal/vignettes/tableby.html)

# Forestplot

## What is `forestplot`?

::: columns
::: {.column width="55%"}
A **forest plot**, also known as a blobbogram, is a graphical display of **estimated results from a number of scientific studies addressing the same question**, along with the overall results.

![](images/paper_fp.png)
:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
![](images/paper_fp2.png){width="120%"}
:::
:::

## Data Preparation

::: columns
::: {.column width="60%"}
```{r load package}
#| code-line-numbers: "|1|3"
library(forestplot) # main package
fp <- read.csv("examples/data/forestplot.csv",
               header = F)
fp
```
:::

::: {.column width="40%"}
![](images/data.png){width="140%"}
:::
:::

## A `simple` forestplot

```{r simple fp, fig.height=10}
#| output-location: column
#| code-line-numbers: "|2|3|4|5"
forestplot(
  labeltext = as.matrix(fp[,1:2]),#设置文本列
  mean = fp$V3, #均值
  lower = fp$V4,#95%下限
  upper = fp$V5 #95%上限
)

```

## A `complex` forestplot

```{r complex fp, fig.height=10}
#| output-location: column
#| code-line-numbers: "2-5|6|7|8-11|12-22|23|24-27|28-39"
forestplot(
          labeltext = as.matrix(fp[,1:2]),#设置文本列#
          mean = fp$V3, #绘图用的均值#
          lower = fp$V4,
          upper = fp$V5,
          is.summary = c(T,rep(c(T,F,F,F,F,F,F,F),3),T,F,F,F,F,F,F), #某行是否加粗显示#
          zero = 0, 
          col = fpColors(box='blue', #均值点的颜色#
                         summary='#8B008B', #加粗行的颜色#
                         lines = 'black', #95%CI线的颜色#
                         zero = 'skyblue'), #无效线的颜色#
          boxsize = 0.5,  #均值点图形的大小#
          lineheight = unit(8,'mm'), #行距#
          colgap = unit(2,'mm'), #列宽#
          lwd.zero = 1,# 无效线宽度
          lwd.ci = 1, # 95%CI线宽度
          xlab = 'The estimate', #x轴的标题#
          lwd.xaxis = 1, #x 轴的刻度#
          lty.ci = 1,# 95%CI线类型
          ci.vertices = T, #是否在95%CI两头添加箭头#
          ci.vertices.height = 0.15, #箭头的长短#
          graph.pos = 2, #森林图画在第几列#
          fn.ci_norm = fpDrawNormalCI, #均值点的形状，Normal是方形，Circel是圆形，Diamod是菱形，Ponit是点#
          txt_gp = fpTxtGp(
                            ticks = gpar(cex = 1), #坐标轴上刻度的大小#
                            xlab = gpar(cex = 1),  #x轴名称的大小#
                            label = gpar(cex = 1)),  #开始用labeltext（）函数设置的文本字体的大小#
          hrzl_lines=list(  "1"  = gpar(lty=1,lwd=1, col="black",fill="black"), #在表的第1行上边加一条黑线#
                            "2"  = gpar(lty=1,lwd=1, col="black",fill="black"),#在表的第2行上边加一条黑线#
                            "33" = gpar(lty=1,lwd=1, col="black",fill="black"),#在表的第33行上边加一条黑线
                            #在表的第5行上边加一条宽度为60，线型两端为butt，颜色为#898988，透明度为55的线段，线段分布在表格的2-3列
                            "5"  = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "8"  = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "13" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "16" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "21" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "24" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "29" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "32" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855")
                            )
       
)
```

## Forestplot with `different color`

```{r color function}
#| code-line-numbers: "|4-5"
fn <- local({
  i = 0
  no_lines <- sum(!is.na(fp$V3))
  b_clrs = colorRampPalette(colors=c(rep('blue', 8), rep('red', 4), rep('blue', 4)))(no_lines)
  l_clrs = colorRampPalette(colors=c(rep('blue', 8), rep('red', 4), rep('blue', 4)))(no_lines)
  
  function(..., clr.line, clr.marker){
    i <<- i + 1
    fpDrawNormalCI(..., clr.line = l_clrs[i], clr.marker = b_clrs[i])
  }
})
```

<br>

```{r colored fp, fig.height=11, fig.align='center'}
#| code-line-numbers: "23"
#| output-location: slide
forestplot(
          labeltext = as.matrix(fp[,1:2]),#设置文本列#
          mean = fp$V3, #绘图用的均值#
          lower = fp$V4,
          upper = fp$V5,
          is.summary = c(T,rep(c(T,F,F,F,F,F,F,F),3),T,F,F,F,F,F,F), #某行是否加粗显示#
          zero = 0, 
          col = fpColors(box='blue', #均值点的颜色#
                         summary='#8B008B', #加粗行的颜色#
                         lines = 'black', #95%CI线的颜色#
                         zero = 'skyblue'), #无效线的颜色#
          boxsize = 0.5,  #均值点图形的大小#
          lineheight = unit(8,'mm'), #行距#
          colgap = unit(2,'mm'), #列宽#
          lwd.zero = 1,# 无效线宽度
          lwd.ci = 1, # 95%CI线宽度
          xlab = 'The estimate', #x轴的标题#
          lwd.xaxis = 1, #x 轴的刻度#
          lty.ci = 1,# 95%CI线类型
          ci.vertices = T, #是否在95%CI两头添加箭头#
          ci.vertices.height = 0.15, #箭头的长短#
          graph.pos = 2, #森林图画在第几列#
          fn.ci_norm = fn, #均值点的形状，Normal是方形，Circel是圆形，Diamod是菱形，Ponit是点#
          txt_gp = fpTxtGp(
                            ticks = gpar(cex = 1), #坐标轴上刻度的大小#
                            xlab = gpar(cex = 1),  #x轴名称的大小#
                            label = gpar(cex = 1)),  #开始用labeltext（）函数设置的文本字体的大小#
          hrzl_lines=list(  "1"  = gpar(lty=1,lwd=1, col="black",fill="black"), #在表的第1行上边加一条黑线#
                            "2"  = gpar(lty=1,lwd=1, col="black",fill="black"),#在表的第2行上边加一条黑线#
                            "33" = gpar(lty=1,lwd=1, col="black",fill="black"),#在表的第33行上边加一条黑线
                            #在表的第5行上边加一条宽度为60，线型两端为butt，颜色为#898988，透明度为55的线段，线段分布在表格的2-3列
                            "5"  = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "8"  = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "13" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "16" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "21" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "24" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "29" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "32" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855")
                            )
       
)
```

## Creat forestplot using `ggplot2` package

![](images/ggfp9.png)

## Step 0: `Data Preparation`

```{r load ggplot2}
library(ggplot2)
dat = read.csv("examples/data/forestplot_ggplot.csv")
dat
```

## Step 1: `Mapping data`

```{r ggplot Step 1 blank}
#| class-source: fourlinesish
#| code-line-numbers: "1"
ggplot(dat, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) 
```

## Step 2: `Add point`

```{r ggplot Step 2 point}
#| class-source: fourlinesish
#| code-line-numbers: "2"
ggplot(dat, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_point(position = position_dodge(.7), size = 2)
```

## Step 3: `Add errorbar`

```{r ggplot Step 3 errorbar}
#| class-source: fourlinesish
#| code-line-numbers: "3"
ggplot(dat, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_point(position = position_dodge(.7), size = 2)+
geom_errorbar(aes(ymin = PC_95_LOW, ymax = PC_95_UP), position = position_dodge(.7), width = 0.3, size = 0.6)

```

## Step 4: `Add horizontal line`

```{r Step 4 hline}
#| class-source: fourlinesish
#| code-line-numbers: "4"
ggplot(dat, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_point(position = position_dodge(.7), size = 2) +
geom_errorbar(aes(ymin = PC_95_LOW, ymax = PC_95_UP), position = position_dodge(.7), width = 0.3, size = 0.6)+
geom_hline(yintercept = 0, linetype = "dashed", colour = "black", size = 0.5) 
```

## Step 5: `Set axis`

```{r Step 5 axis setting}
#| class-source: fourlinesish
#| code-line-numbers: "5-6"
ggplot(dat, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "black", size = 0.5) +
geom_point(position = position_dodge(.7), size = 2) +
geom_errorbar(aes(ymin = PC_95_LOW, ymax = PC_95_UP), position = position_dodge(.7), width = 0.3, size = 0.6) +
xlab("")+
scale_y_continuous("Percentage Change (%) and 95% CI", labels = scales::number_format(accuracy = 0.01))
```

## Step 6: `Set point shape and color`

```{r Step 6}
#| class-source: fourlinesish
#| code-line-numbers: "7-9"
ggplot(dat, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "black", size = 0.5) +
geom_point(position = position_dodge(.7), size = 2) +
geom_errorbar(aes(ymin = PC_95_LOW, ymax = PC_95_UP), position = position_dodge(.7), width = 0.3, size = 0.6) +
xlab("")+
scale_y_continuous("Percentage Change (%) and 95% CI", labels = scales::number_format(accuracy = 0.01))+
scale_shape_manual(values = c(16, 23, 24, 15), guide = guide_legend(title = NULL)) +
scale_fill_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) +
scale_colour_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) 
  
```

## Step 7: `Set theme`

```{r Step 7}
#| class-source: fourlinesish
#| code-line-numbers: "10-18"
ggplot(dat, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "black", size = 0.5) +
geom_point(position = position_dodge(.7), size = 2) +
geom_errorbar(aes(ymin = PC_95_LOW, ymax = PC_95_UP), position = position_dodge(.7), width = 0.3, size = 0.6) +
xlab("")+
scale_y_continuous("Percentage Change (%) and 95% CI", labels = scales::number_format(accuracy = 0.01))+
scale_shape_manual(values = c(16, 23, 24, 15), guide = guide_legend(title = NULL)) +
scale_fill_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) +
scale_colour_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(legend.position = "top") + # top
theme(legend.key = element_blank()) +
theme(legend.background = element_rect(fill = "white", colour = "black")) +
theme(legend.text = element_text(size = 10, color = "black")) +
theme(legend.key.height = unit(0.3, "cm")) +
theme(axis.text.y = element_text(size = 12, angle = 0, color = "black")) +
theme(axis.text.x = element_text(size = 12, color = "black")) 
```

## More `categorical` variables?

```{r make facet data}
#| echo: false
#| message: false
library(tidyverse)
dat1.1 = dat %>% mutate(country = 'China')
dat1.2 = dat %>% mutate(country = 'USA')
dat2 = bind_rows(dat1.1, dat1.2)
dat2
```

## `Facet` in ggplot2

```{r facet, fig.dim=c(10,4),dpi=200}
#| code-fold: true
#| code-line-numbers: "19"
ggplot(dat2, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "black", size = 0.5) +
geom_point(position = position_dodge(.7), size = 2) +
geom_errorbar(aes(ymin = PC_95_LOW, ymax = PC_95_UP), position = position_dodge(.7), width = 0.3, size = 0.6) +
scale_y_continuous("Percentage Change (%) and 95% CI", labels = scales::number_format(accuracy = 0.01))+
scale_shape_manual(values = c(16, 23, 24, 15), guide = guide_legend(title = NULL)) +
scale_fill_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) +
scale_colour_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) +
theme_bw() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  theme(legend.position = "top") + 
  theme(legend.key = element_blank()) +
  theme(legend.background = element_rect(fill = "white", colour = "black")) +
  theme(legend.text = element_text(size = 10, color = "black")) +
  theme(legend.key.height = unit(0.3, "cm")) +
  theme(axis.text.y = element_text(size = 12, angle = 0, color = "black")) +
  theme(axis.text.x = element_text(size = 12, color = "black")) +
  xlab("") +
  facet_wrap(vars(country))
```

## A more simple ggplot2 method: `ggfp` packages

`The goal of ggfp is to simplify the process of drawing forest plots using ggplot2`. We have packaged the main code for drawing forest plots to form the gg_fp() function. gg_fp() has the advantage that only a few parameters need to be provided to draw a nice forest plot. Of course, it also has the obvious disadvantage that some of the more fine-grained graph adjustment parameters are not available in gg_fp().

<hr>

<br> You can install the development version of ggfp like so:

```{r}
#| eval: false
devtools::install_github('lizhiwei1994/ggfp')
```

## Creat forestplot using `ggfp` package

```{r ggpf, fig.dim=c(10,4),dpi=200}
#| code-fold: true
#| eval: false
ggplot(dat2, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "black", size = 0.5) +
geom_point(position = position_dodge(.7), size = 2) +
geom_errorbar(aes(ymin = PC_95_LOW, ymax = PC_95_UP), position = position_dodge(.7), width = 0.3, size = 0.6) +
scale_y_continuous("Percentage Change (%) and 95% CI", labels = scales::number_format(accuracy = 0.01))+
scale_shape_manual(values = c(16, 23, 24, 15), guide = guide_legend(title = NULL)) +
scale_fill_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) +
scale_colour_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) +
theme_bw() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  theme(legend.position = "top") + 
  theme(legend.key = element_blank()) +
  theme(legend.background = element_rect(fill = "white", colour = "black")) +
  theme(legend.text = element_text(size = 10, color = "black")) +
  theme(legend.key.height = unit(0.3, "cm")) +
  theme(axis.text.y = element_text(size = 12, angle = 0, color = "black")) +
  theme(axis.text.x = element_text(size = 12, color = "black")) +
  xlab("") +
  facet_wrap(vars(country))
```

```{r, fig.dim=c(14,4),dpi=200}
library(ggfp)
gg_fp(
  data=dat2, x_axis=Disease, point=PC, low=PC_95_LOW, up=PC_95_UP, group_var=group,
  facet_var=country, point_shape=c(16, 16, 16, 16),
  facet_color = c('#d9d9d9', '#d9d9d9'), group_color = c("#ea4a50", "#325788", "dodgerblue", "coral1"))
```

## Parameters in `gg_fp()`

```{=html}
<style>
.fourlinesish {
  height: 12.5em;
}
</style>
```
```{r parameters}
#| eval: false
gg_fp(
  data,
  x_axis,
  point,
  low,
  up,
  group_var,
  facet_var,
  zero_line = 0,
  point_space = 0.6,
  font_size = 4,
  facet_color,
  group_color,
  point_shape,
  label.x = "x axis",
  label.y = "y axis",
  point.digit = 0.01,
  parsed = FALSE
)
```

<br>

```{r}
#| eval: false
?gg_fp()
```

## Papers published using `ggfp` package

![](images/%E8%87%AA%E5%B7%B1%E7%9A%84%E6%96%87%E7%AB%A0fp1.png)

## Papers published using `ggfp` package

![](images/%E8%87%AA%E5%B7%B1%E7%9A%84%E6%96%87%E7%AB%A0fp2.png)

## Resources

<br> <br>

1.[Introduction to forest plots](https://cran.r-project.org/web/packages/forestplot/vignettes/forestplot.html) <br> <br> <br> 2.[森林图(forest plot)-全套路与珍藏级美图](https://mp.weixin.qq.com/s/hm15JhisVCiNdpNiIK9g8A)

# A combined plot

## A `combined plot` in our published paper

![](images/Total.png)

## `Area Plot` (Part A)

::: columns
::: {.column width="35%"}
An area chart is a graph that combines a line chart and a bar chart to show changes in quantities over time. However, the area below the line is colored in or shaded. Then, other values are plotted below the lines and shaded in a different color, resulting in a chart with layers.
:::

::: {.column width="3%"}
:::

::: {.column width="62%"}
![](images/A.png)
:::
:::

## Step 0: `Data Preparation`

```{r Part A data}
library(ggplot2)
dat1 = readRDS("examples/data/figure1_A.Rdata")
as.data.frame(dat1)
```

## Step 1: `Mapping data`

```{=html}
<style>
.fourlinesish {
  height: 12.5em;
}
</style>
```
```{r Part A Step 1}
#| class-source: fourlinesish
#| code-line-numbers: "1"
(p_A = ggplot(dat1, aes(x = defi_year, y = Incidence, fill = disease_type_en)))
```

## Step 2: `Add geom_area`

```{r Part A Step 2}
#| class-source: fourlinesish
#| code-line-numbers: "2"
(p_A = ggplot(dat1, aes(x = defi_year, y = Incidence, fill = disease_type_en)) +
geom_area())
```

## Step 3: `Set color`

```{r Part A Step 3}
#| class-source: fourlinesish
#| code-line-numbers: "3"
(p_A = ggplot(dat1, aes(x = defi_year, y = Incidence, fill = disease_type_en)) +
geom_area() + 
scale_fill_manual(values =c('#D30f8C', '#6B58A6','#FCAF17',  '#0871B9', '#00B3B1')))
```

## Step 4: `Set theme`

```{r Part A Step 4}
#| class-source: fourlinesish
#| code-line-numbers: "4-12"
(p_A = ggplot(dat1, aes(x = defi_year, y = Incidence, fill = disease_type_en)) +
geom_area() + 
scale_fill_manual(values =c('#D30f8C', '#6B58A6','#FCAF17',  '#0871B9', '#00B3B1'))  +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = 'Year', fill = 'Disease Type', tag = '(A)')+
theme_classic() +
theme(legend.position = 'top')+
guides(fill=guide_legend(ncol=3))+
theme(axis.text.x = element_text(size = 12, hjust = 0.7),axis.text.y = element_text(size = 12)))
```

## `Heatmap` (Part B)

::: columns
::: {.column width="35%"}
A heatmap (or heat map) is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions. The variation in color may be by hue or intensity, giving obvious visual cues to the reader about how the phenomenon is clustered or varies over space.
:::

::: {.column width="3%"}
:::

::: {.column width="62%"}
![](images/B.png)
:::
:::

## Step 0: `Data Preparation`

```{r Part B data}
library(ggplot2)
dat2 = readRDS("examples/data/figure1_B.Rdata")
as.data.frame(dat2)
```

## Step 1: `Mapping data`

```{r Part B color vector}
#| include: false
dis_color = c("#D30f8C", "#D30f8C", "#D30f8C", "#D30f8C", "#D30f8C", "#D30f8C", 
"#D30f8C", "#D30f8C", "#D30f8C", "#D30f8C", "#D30f8C", "#D30f8C", 
"#D30f8C", "#D30f8C", "#D30f8C", "#D30f8C", "#D30f8C", "#D30f8C", 
"#D30f8C", "#D30f8C", "#D30f8C", "#6B58A6", "#6B58A6", "#6B58A6", 
"#6B58A6", "#6B58A6", "#6B58A6", "#6B58A6", "#6B58A6", "#6B58A6", 
"#6B58A6", "#6B58A6", "#6B58A6", "#FCAF17", "#FCAF17", "#FCAF17", 
"#FCAF17", "#FCAF17", "#FCAF17", "#FCAF17", "#FCAF17", "#FCAF17", 
"#FCAF17", "#FCAF17", "#0871B9", "#0871B9", "#0871B9", "#0871B9", 
"#0871B9", "#0871B9", "#0871B9", "#00B3B1", "#00B3B1", "#00B3B1", 
"#00B3B1", "#00B3B1", "#00B3B1", "#00B3B1")
```

```{r Part B Step 1}
#| code-line-numbers: "1"
#| class-source: fourlinesish
(p_B = ggplot(dat2,aes(y = label, x = year_month, fill = Incidence2))) 
```

## Step 2: `Add geom_tile`

```{r Part B Step 2}
#| code-line-numbers: "2"
#| class-source: fourlinesish
(p_B = ggplot(dat2,aes(y = label, x = year_month, fill = Incidence2)) +
geom_tile()) 
```

## Step 3: `Set color`

```{r Part B Step 3}
#| code-line-numbers: "3"
#| class-source: fourlinesish
(p_B = ggplot(dat2,aes(y = label, x = year_month, fill = Incidence2)) +
geom_tile() + 
scale_fill_gradient(high = '#FF0000', low = 'white', limits = c(0, 1))) 
```

## Step 4: `Set theme`

```{r Part B Step 4}
#| code-line-numbers: "4-12"
#| class-source: fourlinesish
(p_B = ggplot(dat2,aes(y = label, x = year_month, fill = Incidence2)) +
geom_tile() + 
scale_fill_gradient(high = '#FF0000', low = 'white', limits = c(0, 1))+
labs(fill = 'Standarded Incidence', y = 'Disease name', x = 'Year', tag = "(B)") +
theme(axis.text.x = element_text(angle = 0, vjust = 0.3, hjust = 0.1),axis.text.y = element_text(color = rev(dis_color), size = 12-4)) +
geom_vline(xintercept = seq(from = 12.5, length.out = 4, by = 12), linetype = 'dashed') +
theme(axis.line = element_line(linetype = 'solid'),panel.border = element_rect(color = 'grey', fill = NA), axis.ticks.x = element_blank(),axis.text.x = element_text(color = 'black'))+
scale_x_discrete(labels =c(rep('',5),  2014,rep('',11), 2015, rep('',11), 2016, rep('',11), 2017, rep('',11), 2018, rep('',6))) +
theme(legend.position = 'top') +
theme(axis.title = element_text(size = 12),axis.text.x = element_text(size = 12))) 
```

## `Radial heatmap` (Part C)

A radial heatmap is a more complex form of data visualization that is essentially **a simple heatmap rolled into a ball**. Therefore, a radial heatmap can warp both space and time to aid in the expedited **discovery of periodic patterns** and trends in time series data and other cyclic variables.

![](images/C.png)

## Step 0: `Data Preparation`

```{r Part C data}
library(ggplot2)
dat3 = readRDS("examples/data/figure1_C.Rdata")
as.data.frame(dat3)
```

## Step 1: `Mapping data`

```{r Part C colormap}
#| include: false
colormap=c("#FFFFD9", "#EFF8B5", "#CFECB3", "#97D6B8", "#5CC0C0", "#30A5C2", 
"#1E80B8", "#2254A3", "#21318D", "#081D58")
```

```{r Part C Step 1}
#| code-line-numbers: "1"
#| class-source: fourlinesish
(p_C = ggplot(dat3,aes(x = defi_month, y = defi_year, fill = Incidence2)))
```

## Step 2: `Add geom_tile`

```{r Part C Step 2}
#| code-line-numbers: "2"
#| class-source: fourlinesish
(p_C = ggplot(dat3,aes(x = defi_month, y = defi_year, fill = Incidence2)) +
geom_tile(color = 'black'))
```

## Step 3: `Facet plot`

```{r Part C Step 3}
#| code-line-numbers: "3"
#| class-source: fourlinesish
(p_C = ggplot(dat3,aes(x = defi_month, y = defi_year, fill = Incidence2)) +
geom_tile(color = 'black') + 
facet_wrap(vars(disease_type_en), nrow = 1, ncol = 5))
```

## Step 4: `Change coordinate system`

```{r Part C Step 4}
#| code-line-numbers: "4"
#| class-source: fourlinesish
(p_C = ggplot(dat3,aes(x = defi_month, y = defi_year, fill = Incidence2)) +
geom_tile(color = 'black') + 
facet_wrap(vars(disease_type_en), nrow = 1, ncol = 5)+
coord_polar())
```

## Step 5: `Set color`

```{r Part C Step 5}
#| code-line-numbers: "5-13"
#| class-source: fourlinesish
(p_C = ggplot(dat3,aes(x = defi_month, y = defi_year, fill = Incidence2)) +
geom_tile(color = 'black') + 
facet_wrap(vars(disease_type_en), nrow = 1, ncol = 5)+
coord_polar()+
scale_fill_gradientn(colours=colormap)) 
```

## Step 6: `Set theme`

```{r Part C Step 6}
#| code-line-numbers: "6-13"
#| class-source: fourlinesish
(p_C = ggplot(dat3,aes(x = defi_month, y = defi_year, fill = Incidence2)) +
geom_tile(color = 'black') + 
facet_wrap(vars(disease_type_en), nrow = 1, ncol = 5)+
coord_polar()+
scale_fill_gradientn(colours=colormap) +
labs(tag = '(C)', fill = 'Standarded Incidence', x = 'Month', y = "Year") +
scale_x_continuous( breaks=seq(from = 1, to = 12, length.out = 12)) +
theme_classic()+
theme(plot.margin=unit(c(-4,0.5,-4,-0), "cm")) +
theme(legend.position = 'bottom') +
theme(axis.text = element_text(size = 12),axis.title = element_text(size = 12),strip.text = element_text(size = 12)))
```

## Combine multiple figures using [`patchwork` package](https://quarto.org)

```{r Combine figure, fig.dim=c(16,9)}
#| output-location: fragment
library(patchwork)
(combined_plot = (p_A+p_B)/p_C)
```

## Plots in our papers created in `R`

![](images/image_ppt3.png)

## Resources

::: columns
::: {.column width="50%"}
1.[r graph gallery](https://www.r-graph-gallery.com/)

[![](images/r-g.png)](https://www.r-graph-gallery.com/)
:::

::: {.column width="50%"}
2.[r charts](https://r-charts.com/)

[![](images/r-c.png)](https://r-charts.com/)
:::
:::

::: columns
::: {.column width="50%"}
3.[R-bloggers](https://www.r-bloggers.com/)

[![](images/p3.png)](https://www.r-bloggers.com/)
:::

::: {.column width="50%"}
4.[STHDA](http://www.sthda.com/)

[![](images/p4.png)](http://www.sthda.com/)
:::
:::

# Thanks for you listening!