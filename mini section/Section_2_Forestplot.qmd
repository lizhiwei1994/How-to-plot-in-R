---
title: "Forestplot"
author: "Li Zhiwei"
format: 
  revealjs:
    theme: [default, theme/custom.scss, theme/q-theme.scss]
    slide-number: c/t
    logo: "images/logo_ccmu.png"
    footer: "[https://jthomasmock.github.io/arrow-dplyr](https://jthomasmock.github.io/arrow-dplyr)"
    incremental: true
    highlight-style: a11y
    width: 1920
    height: 1080
editor: visual
execute: 
  echo: true
---

## What is `forestplot`?

::: columns
::: {.column width="55%"}
A **forest plot**, also known as a blobbogram, is a graphical display of **estimated results from a number of scientific studies addressing the same question**, along with the overall results.

![](images/paper_fp.png)
:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
![](images/paper_fp2.png){width="120%"}
:::
:::

## Data Preparation

::: columns
::: {.column width="60%"}
```{r load package}
#| code-line-numbers: "|1|3"
library(forestplot) # main package
fp <- read.csv("examples/data/forestplot.csv",
               header = F)
fp
```
:::

::: {.column width="40%"}
![](images/data.png){width="140%"}
:::
:::

## A `simple` forestplot

```{r simple fp, fig.height=10}
#| output-location: column
#| code-line-numbers: "|2|3|4|5"
forestplot(
  labeltext = as.matrix(fp[,1:2]),#设置文本列
  mean = fp$V3, #均值
  lower = fp$V4,#95%下限
  upper = fp$V5 #95%上限
)

```

## A `complex` forestplot

```{r complex fp, fig.height=10}
#| output-location: column
#| code-line-numbers: "2-5|6|7|8-11|12-22|23|24-27|28-39"
forestplot(
          labeltext = as.matrix(fp[,1:2]),#设置文本列#
          mean = fp$V3, #绘图用的均值#
          lower = fp$V4,
          upper = fp$V5,
          is.summary = c(T,rep(c(T,F,F,F,F,F,F,F),3),T,F,F,F,F,F,F), #某行是否加粗显示#
          zero = 0, 
          col = fpColors(box='blue', #均值点的颜色#
                         summary='#8B008B', #加粗行的颜色#
                         lines = 'black', #95%CI线的颜色#
                         zero = 'skyblue'), #无效线的颜色#
          boxsize = 0.5,  #均值点图形的大小#
          lineheight = unit(8,'mm'), #行距#
          colgap = unit(2,'mm'), #列宽#
          lwd.zero = 1,# 无效线宽度
          lwd.ci = 1, # 95%CI线宽度
          xlab = 'The estimate', #x轴的标题#
          lwd.xaxis = 1, #x 轴的刻度#
          lty.ci = 1,# 95%CI线类型
          ci.vertices = T, #是否在95%CI两头添加箭头#
          ci.vertices.height = 0.15, #箭头的长短#
          graph.pos = 2, #森林图画在第几列#
          fn.ci_norm = fpDrawNormalCI, #均值点的形状，Normal是方形，Circel是圆形，Diamod是菱形，Ponit是点#
          txt_gp = fpTxtGp(
                            ticks = gpar(cex = 1), #坐标轴上刻度的大小#
                            xlab = gpar(cex = 1),  #x轴名称的大小#
                            label = gpar(cex = 1)),  #开始用labeltext（）函数设置的文本字体的大小#
          hrzl_lines=list(  "1"  = gpar(lty=1,lwd=1, col="black",fill="black"), #在表的第1行上边加一条黑线#
                            "2"  = gpar(lty=1,lwd=1, col="black",fill="black"),#在表的第2行上边加一条黑线#
                            "33" = gpar(lty=1,lwd=1, col="black",fill="black"),#在表的第33行上边加一条黑线
                            #在表的第5行上边加一条宽度为60，线型两端为butt，颜色为#898988，透明度为55的线段，线段分布在表格的2-3列
                            "5"  = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "8"  = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "13" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "16" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "21" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "24" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "29" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "32" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855")
                            )
       
)
```

## Forestplot with `different color`

```{r color function}
#| code-line-numbers: "|4-5"
fn <- local({
  i = 0
  no_lines <- sum(!is.na(fp$V3))
  b_clrs = colorRampPalette(colors=c(rep('blue', 8), rep('red', 4), rep('blue', 4)))(no_lines)
  l_clrs = colorRampPalette(colors=c(rep('blue', 8), rep('red', 4), rep('blue', 4)))(no_lines)
  
  function(..., clr.line, clr.marker){
    i <<- i + 1
    fpDrawNormalCI(..., clr.line = l_clrs[i], clr.marker = b_clrs[i])
  }
})
```

<br>

```{r colored fp, fig.height=11, fig.align='center'}
#| code-line-numbers: "23"
#| output-location: slide
forestplot(
          labeltext = as.matrix(fp[,1:2]),#设置文本列#
          mean = fp$V3, #绘图用的均值#
          lower = fp$V4,
          upper = fp$V5,
          is.summary = c(T,rep(c(T,F,F,F,F,F,F,F),3),T,F,F,F,F,F,F), #某行是否加粗显示#
          zero = 0, 
          col = fpColors(box='blue', #均值点的颜色#
                         summary='#8B008B', #加粗行的颜色#
                         lines = 'black', #95%CI线的颜色#
                         zero = 'skyblue'), #无效线的颜色#
          boxsize = 0.5,  #均值点图形的大小#
          lineheight = unit(8,'mm'), #行距#
          colgap = unit(2,'mm'), #列宽#
          lwd.zero = 1,# 无效线宽度
          lwd.ci = 1, # 95%CI线宽度
          xlab = 'The estimate', #x轴的标题#
          lwd.xaxis = 1, #x 轴的刻度#
          lty.ci = 1,# 95%CI线类型
          ci.vertices = T, #是否在95%CI两头添加箭头#
          ci.vertices.height = 0.15, #箭头的长短#
          graph.pos = 2, #森林图画在第几列#
          fn.ci_norm = fn, #均值点的形状，Normal是方形，Circel是圆形，Diamod是菱形，Ponit是点#
          txt_gp = fpTxtGp(
                            ticks = gpar(cex = 1), #坐标轴上刻度的大小#
                            xlab = gpar(cex = 1),  #x轴名称的大小#
                            label = gpar(cex = 1)),  #开始用labeltext（）函数设置的文本字体的大小#
          hrzl_lines=list(  "1"  = gpar(lty=1,lwd=1, col="black",fill="black"), #在表的第1行上边加一条黑线#
                            "2"  = gpar(lty=1,lwd=1, col="black",fill="black"),#在表的第2行上边加一条黑线#
                            "33" = gpar(lty=1,lwd=1, col="black",fill="black"),#在表的第33行上边加一条黑线
                            #在表的第5行上边加一条宽度为60，线型两端为butt，颜色为#898988，透明度为55的线段，线段分布在表格的2-3列
                            "5"  = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "8"  = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "13" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "16" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "21" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "24" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "29" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855"),
                            "32" = gpar(lty=1,lwd=60,lineend="butt",columns=c(2:3),col="#89898855")
                            )
       
)
```

## Creat forestplot using `ggplot2` package

![](images/ggfp9.png)

## Step 0: `Data Preparation`

```{r load ggplot2}
library(ggplot2)
dat = read.csv("examples/data/forestplot_ggplot.csv")
dat
```

## Step 1: `Mapping data`

```{r ggplot Step 1 blank}
#| class-source: fourlinesish
#| code-line-numbers: "1"
ggplot(dat, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) 
```

## Step 2: `Add point`

```{r ggplot Step 2 point}
#| class-source: fourlinesish
#| code-line-numbers: "2"
ggplot(dat, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_point(position = position_dodge(.7), size = 2)
```

## Step 3: `Add errorbar`

```{r ggplot Step 3 errorbar}
#| class-source: fourlinesish
#| code-line-numbers: "3"
ggplot(dat, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_point(position = position_dodge(.7), size = 2)+
geom_errorbar(aes(ymin = PC_95_LOW, ymax = PC_95_UP), position = position_dodge(.7), width = 0.3, size = 0.6)

```

## Step 4: `Add horizontal line`

```{r Step 4 hline}
#| class-source: fourlinesish
#| code-line-numbers: "4"
ggplot(dat, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_point(position = position_dodge(.7), size = 2) +
geom_errorbar(aes(ymin = PC_95_LOW, ymax = PC_95_UP), position = position_dodge(.7), width = 0.3, size = 0.6)+
geom_hline(yintercept = 0, linetype = "dashed", colour = "black", size = 0.5) 
```

## Step 5: `Set axis`

```{r Step 5 axis setting}
#| class-source: fourlinesish
#| code-line-numbers: "5-6"
ggplot(dat, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "black", size = 0.5) +
geom_point(position = position_dodge(.7), size = 2) +
geom_errorbar(aes(ymin = PC_95_LOW, ymax = PC_95_UP), position = position_dodge(.7), width = 0.3, size = 0.6) +
xlab("")+
scale_y_continuous("Percentage Change (%) and 95% CI", labels = scales::number_format(accuracy = 0.01))
```

## Step 6: `Set point shape and color`

```{r Step 6}
#| class-source: fourlinesish
#| code-line-numbers: "7-9"
ggplot(dat, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "black", size = 0.5) +
geom_point(position = position_dodge(.7), size = 2) +
geom_errorbar(aes(ymin = PC_95_LOW, ymax = PC_95_UP), position = position_dodge(.7), width = 0.3, size = 0.6) +
xlab("")+
scale_y_continuous("Percentage Change (%) and 95% CI", labels = scales::number_format(accuracy = 0.01))+
scale_shape_manual(values = c(16, 23, 24, 15), guide = guide_legend(title = NULL)) +
scale_fill_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) +
scale_colour_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) 
  
```

## Step 7: `Set theme`

```{r Step 7}
#| class-source: fourlinesish
#| code-line-numbers: "10-18"
ggplot(dat, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "black", size = 0.5) +
geom_point(position = position_dodge(.7), size = 2) +
geom_errorbar(aes(ymin = PC_95_LOW, ymax = PC_95_UP), position = position_dodge(.7), width = 0.3, size = 0.6) +
xlab("")+
scale_y_continuous("Percentage Change (%) and 95% CI", labels = scales::number_format(accuracy = 0.01))+
scale_shape_manual(values = c(16, 23, 24, 15), guide = guide_legend(title = NULL)) +
scale_fill_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) +
scale_colour_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(legend.position = "top") + # top
theme(legend.key = element_blank()) +
theme(legend.background = element_rect(fill = "white", colour = "black")) +
theme(legend.text = element_text(size = 10, color = "black")) +
theme(legend.key.height = unit(0.3, "cm")) +
theme(axis.text.y = element_text(size = 12, angle = 0, color = "black")) +
theme(axis.text.x = element_text(size = 12, color = "black")) 
```

## More `categorical` variables?

```{r make facet data}
#| echo: false
#| message: false
library(tidyverse)
dat1.1 = dat %>% mutate(country = 'China')
dat1.2 = dat %>% mutate(country = 'USA')
dat2 = bind_rows(dat1.1, dat1.2)
dat2
```

## `Facet` in ggplot2

```{r facet, fig.dim=c(10,4),dpi=200}
#| code-fold: true
#| code-line-numbers: "19"
ggplot(dat2, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "black", size = 0.5) +
geom_point(position = position_dodge(.7), size = 2) +
geom_errorbar(aes(ymin = PC_95_LOW, ymax = PC_95_UP), position = position_dodge(.7), width = 0.3, size = 0.6) +
scale_y_continuous("Percentage Change (%) and 95% CI", labels = scales::number_format(accuracy = 0.01))+
scale_shape_manual(values = c(16, 23, 24, 15), guide = guide_legend(title = NULL)) +
scale_fill_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) +
scale_colour_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) +
theme_bw() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  theme(legend.position = "top") + 
  theme(legend.key = element_blank()) +
  theme(legend.background = element_rect(fill = "white", colour = "black")) +
  theme(legend.text = element_text(size = 10, color = "black")) +
  theme(legend.key.height = unit(0.3, "cm")) +
  theme(axis.text.y = element_text(size = 12, angle = 0, color = "black")) +
  theme(axis.text.x = element_text(size = 12, color = "black")) +
  xlab("") +
  facet_wrap(vars(country))
```

## A more simple ggplot2 method: `ggfp` packages

`The goal of ggfp is to simplify the process of drawing forest plots using ggplot2`. We have packaged the main code for drawing forest plots to form the gg_fp() function. gg_fp() has the advantage that only a few parameters need to be provided to draw a nice forest plot. Of course, it also has the obvious disadvantage that some of the more fine-grained graph adjustment parameters are not available in gg_fp().

<hr>

<br> You can install the development version of ggfp like so:

```{r}
#| eval: false
devtools::install_github('lizhiwei1994/ggfp')
```

## Creat forestplot using `ggfp` package

```{r ggpf, fig.dim=c(10,4),dpi=200}
#| code-fold: true
#| eval: false
ggplot(dat2, aes(x = Disease, y = PC, shape = group, fill = group, colour = group, group = group)) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "black", size = 0.5) +
geom_point(position = position_dodge(.7), size = 2) +
geom_errorbar(aes(ymin = PC_95_LOW, ymax = PC_95_UP), position = position_dodge(.7), width = 0.3, size = 0.6) +
scale_y_continuous("Percentage Change (%) and 95% CI", labels = scales::number_format(accuracy = 0.01))+
scale_shape_manual(values = c(16, 23, 24, 15), guide = guide_legend(title = NULL)) +
scale_fill_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) +
scale_colour_manual(values = c("#ea4a50", "#325788", "dodgerblue", "coral1"), guide = guide_legend(title = NULL)) +
theme_bw() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  theme(legend.position = "top") + 
  theme(legend.key = element_blank()) +
  theme(legend.background = element_rect(fill = "white", colour = "black")) +
  theme(legend.text = element_text(size = 10, color = "black")) +
  theme(legend.key.height = unit(0.3, "cm")) +
  theme(axis.text.y = element_text(size = 12, angle = 0, color = "black")) +
  theme(axis.text.x = element_text(size = 12, color = "black")) +
  xlab("") +
  facet_wrap(vars(country))
```

```{r, fig.dim=c(14,4),dpi=200}
library(ggfp)
gg_fp(
  data=dat2, x_axis=Disease, point=PC, low=PC_95_LOW, up=PC_95_UP, group_var=group,
  facet_var=country, point_shape=c(16, 16, 16, 16),
  facet_color = c('#d9d9d9', '#d9d9d9'), group_color = c("#ea4a50", "#325788", "dodgerblue", "coral1"))
```

## Parameters in `gg_fp()`

```{=html}
<style>
.fourlinesish {
  height: 12.5em;
}
</style>
```
```{r parameters}
#| eval: false
gg_fp(
  data,
  x_axis,
  point,
  low,
  up,
  group_var,
  facet_var,
  zero_line = 0,
  point_space = 0.6,
  font_size = 4,
  facet_color,
  group_color,
  point_shape,
  label.x = "x axis",
  label.y = "y axis",
  point.digit = 0.01,
  parsed = FALSE
)
```

<br>

```{r}
#| eval: false
?gg_fp()
```

## Papers published using `ggfp` package

![](images/%E8%87%AA%E5%B7%B1%E7%9A%84%E6%96%87%E7%AB%A0fp1.png)

## Papers published using `ggfp` package

![](images/%E8%87%AA%E5%B7%B1%E7%9A%84%E6%96%87%E7%AB%A0fp2.png)

## Resources

<br> <br>

1.[Introduction to forest plots](https://cran.r-project.org/web/packages/forestplot/vignettes/forestplot.html) <br> <br> <br> 2.[森林图(forest plot)-全套路与珍藏级美图](https://mp.weixin.qq.com/s/hm15JhisVCiNdpNiIK9g8A)
